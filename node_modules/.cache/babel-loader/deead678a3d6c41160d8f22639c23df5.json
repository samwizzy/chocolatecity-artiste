{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { openSnackbar } from \"@/store/reducers/@app/snackbarSlice\";\nexport const addTweetAsync = createAsyncThunk(\"tweets/create\", async (data, thunkAPI) => {\n  return await axios.post(\"comments\", data).then(res => {\n    thunkAPI.dispatch(openSnackbar({\n      message: \"Tweet saved successfully\"\n    }));\n    return res.data;\n  });\n});\nexport const getTweetsAsync = createAsyncThunk(\"tweets/all\", async (page, limit = 10) => {\n  return await axios.get(`comments?_page=${page}&_limit=${limit}`).then(res => {\n    return res.data;\n  });\n});\nexport const updateTweetsAsync = createAsyncThunk(\"tweets/update\", async (data, thunkAPI) => {\n  return await axios.put(`comments/${data.id}`, data).then(res => {\n    thunkAPI.dispatch(openSnackbar({\n      message: \"Tweet saved successfully\"\n    }));\n    return res.data;\n  });\n});\nconst tweetSlice = createSlice({\n  name: \"tweets\",\n  initialState: {\n    loading: false,\n    isSubmitting: false,\n    tweets: [],\n    dialog: {\n      open: false,\n      data: null\n    }\n  },\n  reducers: {\n    removeTweet: (state, action) => {\n      state.tweets = state.tweets.filter(p => p.id !== action.payload);\n    },\n    openDialog: (state, action) => {\n      state.dialog.open = true;\n      state.dialog.data = action.payload;\n    },\n    closeDialog: (state, action) => {\n      state.dialog.open = false;\n      state.dialog.data = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(getTweetsAsync.pending, (state, action) => {\n      state.loading = true;\n    });\n    builder.addCase(getTweetsAsync.fulfilled, (state, action) => {\n      state.loading = false;\n      state.tweets = action.payload;\n    }); // add a new tweet\n\n    builder.addCase(addTweetAsync.pending, (state, action) => {\n      state.loading = true;\n    });\n    builder.addCase(addTweetAsync.fulfilled, (state, action) => {\n      state.loading = false;\n      state.tweets.unshift(action.payload);\n    }); // update a tweet\n\n    builder.addCase(updateTweetsAsync.pending, (state, action) => {\n      state.isSubmitting = true;\n    });\n    builder.addCase(updateTweetsAsync.fulfilled, (state, action) => {\n      const rest = state.tweets.filter(tweet => tweet.id !== action.payload.id);\n      state.isSubmitting = false;\n      state.tweets = [action.payload, ...rest];\n    });\n  }\n});\nexport const {\n  removeTweet,\n  openDialog,\n  closeDialog\n} = tweetSlice.actions;\nexport const deleteTweetAsync = id => async dispatch => {\n  await axios.delete(`comments/${id}`).then(res => {\n    dispatch(removeTweet(id));\n  });\n};\nexport default tweetSlice.reducer;","map":{"version":3,"sources":["/Users/admin/Documents/projects/ccartists-app/src/store/reducers/tweetSlice.js"],"names":["createSlice","createAsyncThunk","axios","openSnackbar","addTweetAsync","data","thunkAPI","post","then","res","dispatch","message","getTweetsAsync","page","limit","get","updateTweetsAsync","put","id","tweetSlice","name","initialState","loading","isSubmitting","tweets","dialog","open","reducers","removeTweet","state","action","filter","p","payload","openDialog","closeDialog","extraReducers","builder","addCase","pending","fulfilled","unshift","rest","tweet","actions","deleteTweetAsync","delete","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { openSnackbar } from \"@/store/reducers/@app/snackbarSlice\";\n\nexport const addTweetAsync = createAsyncThunk(\n  \"tweets/create\",\n  async (data, thunkAPI) => {\n    return await axios.post(\"comments\", data).then((res) => {\n      thunkAPI.dispatch(openSnackbar({ message: \"Tweet saved successfully\" }));\n      return res.data;\n    });\n  }\n);\n\nexport const getTweetsAsync = createAsyncThunk(\n  \"tweets/all\",\n  async (page, limit = 10) => {\n    return await axios\n      .get(`comments?_page=${page}&_limit=${limit}`)\n      .then((res) => {\n        return res.data;\n      });\n  }\n);\n\nexport const updateTweetsAsync = createAsyncThunk(\n  \"tweets/update\",\n  async (data, thunkAPI) => {\n    return await axios.put(`comments/${data.id}`, data).then((res) => {\n      thunkAPI.dispatch(openSnackbar({ message: \"Tweet saved successfully\" }));\n      return res.data;\n    });\n  }\n);\n\nconst tweetSlice = createSlice({\n  name: \"tweets\",\n  initialState: {\n    loading: false,\n    isSubmitting: false,\n    tweets: [],\n    dialog: {\n      open: false,\n      data: null,\n    },\n  },\n  reducers: {\n    removeTweet: (state, action) => {\n      state.tweets = state.tweets.filter((p) => p.id !== action.payload);\n    },\n    openDialog: (state, action) => {\n      state.dialog.open = true;\n      state.dialog.data = action.payload;\n    },\n    closeDialog: (state, action) => {\n      state.dialog.open = false;\n      state.dialog.data = null;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(getTweetsAsync.pending, (state, action) => {\n      state.loading = true;\n    });\n    builder.addCase(getTweetsAsync.fulfilled, (state, action) => {\n      state.loading = false;\n      state.tweets = action.payload;\n    });\n\n    // add a new tweet\n    builder.addCase(addTweetAsync.pending, (state, action) => {\n      state.loading = true;\n    });\n    builder.addCase(addTweetAsync.fulfilled, (state, action) => {\n      state.loading = false;\n      state.tweets.unshift(action.payload);\n    });\n\n    // update a tweet\n    builder.addCase(updateTweetsAsync.pending, (state, action) => {\n      state.isSubmitting = true;\n    });\n    builder.addCase(updateTweetsAsync.fulfilled, (state, action) => {\n      const rest = state.tweets.filter(\n        (tweet) => tweet.id !== action.payload.id\n      );\n      state.isSubmitting = false;\n      state.tweets = [action.payload, ...rest];\n    });\n  },\n});\n\nexport const { removeTweet, openDialog, closeDialog } = tweetSlice.actions;\n\nexport const deleteTweetAsync = (id) => async (dispatch) => {\n  await axios.delete(`comments/${id}`).then((res) => {\n    dispatch(removeTweet(id));\n  });\n};\n\nexport default tweetSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}