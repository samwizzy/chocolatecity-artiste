{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nexport const addTweetAsync = createAsyncThunk(\"tweets/create\", async data => {\n  return await axios.post(\"comments\", data).then(res => {\n    return res.data;\n  });\n});\nexport const getTweetsAsync = createAsyncThunk(\"tweets/all\", async () => {\n  return await axios.get(\"comments\").then(res => {\n    return res.data;\n  });\n});\nexport const updateTweetsAsync = createAsyncThunk(\"tweets/update\", async (data, id) => {\n  return await axios.put(`comments/${id}`, data).then(res => {\n    return res.data;\n  });\n});\nconst tweetSlice = createSlice({\n  name: \"tweets\",\n  initialState: {\n    loading: false,\n    isSubmitting: false,\n    tweets: [],\n    dialog: {\n      open: false,\n      data: null\n    }\n  },\n  reducers: {\n    removeTweet: (state, action) => {\n      state.projects = state.projects.filter(p => p._id !== action.payload._id);\n    },\n    openDialog: (state, action) => {\n      state.dialog.open = true;\n      state.dialog.data = action.payload;\n    },\n    closeDialog: (state, action) => {\n      state.dialog.open = false;\n      state.dialog.data = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(getTweetsAsync.pending, (state, action) => {\n      state.loading = true;\n    });\n    builder.addCase(getTweetsAsync.fulfilled, (state, action) => {\n      state.loading = false;\n      state.tweets = action.payload;\n    }); // add a new tweet\n\n    builder.addCase(addTweetAsync.pending, (state, action) => {\n      state.loading = true;\n    });\n    builder.addCase(addTweetAsync.fulfilled, (state, action) => {\n      state.loading = false;\n      state.tweets.unshift(action.payload);\n    }); // update a tweet\n\n    builder.addCase(updateTweetsAsync.pending, (state, action) => {\n      state.isSubmitting = true;\n    });\n    builder.addCase(updateTweetsAsync.fulfilled, (state, action) => {\n      state.isSubmitting = false;\n    });\n  }\n});\nexport const {\n  removeTweet,\n  openDialog,\n  closeDialog\n} = tweetSlice.actions;\nexport const deleteTweetAsync = id => async dispatch => {\n  await axios.delete(`comments/${id}`).then(res => {\n    dispatch(removeTweet(res.data.data));\n  });\n};\nexport default tweetSlice.reducer;","map":{"version":3,"sources":["/Users/admin/Documents/projects/ccartists-app/src/store/reducers/tweetSlice.js"],"names":["createSlice","createAsyncThunk","axios","addTweetAsync","data","post","then","res","getTweetsAsync","get","updateTweetsAsync","id","put","tweetSlice","name","initialState","loading","isSubmitting","tweets","dialog","open","reducers","removeTweet","state","action","projects","filter","p","_id","payload","openDialog","closeDialog","extraReducers","builder","addCase","pending","fulfilled","unshift","actions","deleteTweetAsync","dispatch","delete","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nexport const addTweetAsync = createAsyncThunk(\"tweets/create\", async (data) => {\n  return await axios.post(\"comments\", data).then((res) => {\n    return res.data;\n  });\n});\n\nexport const getTweetsAsync = createAsyncThunk(\"tweets/all\", async () => {\n  return await axios.get(\"comments\").then((res) => {\n    return res.data;\n  });\n});\n\nexport const updateTweetsAsync = createAsyncThunk(\n  \"tweets/update\",\n  async (data, id) => {\n    return await axios.put(`comments/${id}`, data).then((res) => {\n      return res.data;\n    });\n  }\n);\n\nconst tweetSlice = createSlice({\n  name: \"tweets\",\n  initialState: {\n    loading: false,\n    isSubmitting: false,\n    tweets: [],\n    dialog: {\n      open: false,\n      data: null,\n    },\n  },\n  reducers: {\n    removeTweet: (state, action) => {\n      state.projects = state.projects.filter(\n        (p) => p._id !== action.payload._id\n      );\n    },\n    openDialog: (state, action) => {\n      state.dialog.open = true;\n      state.dialog.data = action.payload;\n    },\n    closeDialog: (state, action) => {\n      state.dialog.open = false;\n      state.dialog.data = null;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(getTweetsAsync.pending, (state, action) => {\n      state.loading = true;\n    });\n    builder.addCase(getTweetsAsync.fulfilled, (state, action) => {\n      state.loading = false;\n      state.tweets = action.payload;\n    });\n\n    // add a new tweet\n    builder.addCase(addTweetAsync.pending, (state, action) => {\n      state.loading = true;\n    });\n    builder.addCase(addTweetAsync.fulfilled, (state, action) => {\n      state.loading = false;\n      state.tweets.unshift(action.payload);\n    });\n\n    // update a tweet\n    builder.addCase(updateTweetsAsync.pending, (state, action) => {\n      state.isSubmitting = true;\n    });\n    builder.addCase(updateTweetsAsync.fulfilled, (state, action) => {\n      state.isSubmitting = false;\n    });\n  },\n});\n\nexport const { removeTweet, openDialog, closeDialog } = tweetSlice.actions;\n\nexport const deleteTweetAsync = (id) => async (dispatch) => {\n  await axios.delete(`comments/${id}`).then((res) => {\n    dispatch(removeTweet(res.data.data));\n  });\n};\n\nexport default tweetSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}