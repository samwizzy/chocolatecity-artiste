{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nexport const addTweetAsync = createAsyncThunk(\"tweets/create\", async data => {\n  return await axios.post(\"comments\", data).then(res => {\n    return res.data;\n  });\n});\nexport const getTweetsAsync = createAsyncThunk(\"tweets/all\", async () => {\n  return await axios.get(\"comments\").then(res => {\n    return res.data;\n  });\n});\nexport const getTweetByidAsync = createAsyncThunk(\"tweets/id\", async id => {\n  return await axios.get(`comments/${id}`).then(res => {\n    return res.data;\n  });\n});\nconst tweetSlice = createSlice({\n  name: \"tweets\",\n  initialState: {\n    loading: false,\n    projects: [],\n    projectById: null\n  },\n  reducers: {\n    removeTweet: (state, action) => {\n      state.projects = state.projects.filter(p => p._id !== action.payload._id);\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(getProjectsAsync.fulfilled, (state, action) => {\n      state.projects = action.payload;\n    });\n    builder.addCase(getProjectByidAsync.fulfilled, (state, action) => {\n      state.projectById = action.payload;\n    });\n    builder.addCase(addProjectAsync.pending, (state, action) => {\n      state.loading = true;\n    });\n    builder.addCase(addProjectAsync.fulfilled, (state, action) => {\n      state.loading = false;\n      state.projects.unshift(action.payload);\n    });\n  }\n});\nexport const {\n  removeTweet\n} = tweetSlice.actions;\nexport const removeTweetAsync = id => async dispatch => {\n  await axios.delete(`comments/${id}`).then(res => {\n    dispatch(removeTweet(res.data.data));\n  });\n};\nexport default tweetSlice.reducer;","map":{"version":3,"sources":["/Users/admin/Documents/projects/ccartists-app/src/store/reducers/tweetSlice.js"],"names":["createSlice","createAsyncThunk","axios","addTweetAsync","data","post","then","res","getTweetsAsync","get","getTweetByidAsync","id","tweetSlice","name","initialState","loading","projects","projectById","reducers","removeTweet","state","action","filter","p","_id","payload","extraReducers","builder","addCase","getProjectsAsync","fulfilled","getProjectByidAsync","addProjectAsync","pending","unshift","actions","removeTweetAsync","dispatch","delete","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nexport const addTweetAsync = createAsyncThunk(\"tweets/create\", async (data) => {\n  return await axios.post(\"comments\", data).then((res) => {\n    return res.data;\n  });\n});\n\nexport const getTweetsAsync = createAsyncThunk(\"tweets/all\", async () => {\n  return await axios.get(\"comments\").then((res) => {\n    return res.data;\n  });\n});\n\nexport const getTweetByidAsync = createAsyncThunk(\"tweets/id\", async (id) => {\n  return await axios.get(`comments/${id}`).then((res) => {\n    return res.data;\n  });\n});\n\nconst tweetSlice = createSlice({\n  name: \"tweets\",\n  initialState: {\n    loading: false,\n    projects: [],\n    projectById: null,\n  },\n  reducers: {\n    removeTweet: (state, action) => {\n      state.projects = state.projects.filter(\n        (p) => p._id !== action.payload._id\n      );\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(getProjectsAsync.fulfilled, (state, action) => {\n      state.projects = action.payload;\n    });\n    builder.addCase(getProjectByidAsync.fulfilled, (state, action) => {\n      state.projectById = action.payload;\n    });\n\n    builder.addCase(addProjectAsync.pending, (state, action) => {\n      state.loading = true;\n    });\n    builder.addCase(addProjectAsync.fulfilled, (state, action) => {\n      state.loading = false;\n      state.projects.unshift(action.payload);\n    });\n  },\n});\n\nexport const { removeTweet } = tweetSlice.actions;\n\nexport const removeTweetAsync = (id) => async (dispatch) => {\n  await axios.delete(`comments/${id}`).then((res) => {\n    dispatch(removeTweet(res.data.data));\n  });\n};\n\nexport default tweetSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}