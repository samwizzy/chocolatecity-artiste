{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nexport const addProjectAsync = createAsyncThunk(\"projects/create\", async data => {\n  return await axios.post(\"projects\", data).then(res => {\n    return res.data;\n  });\n});\nexport const getProjectsAsync = createAsyncThunk(\"projects/all\", async () => {\n  return await axios.get(\"projects\").then(res => {\n    return res.data;\n  });\n});\nexport const getProjectByidAsync = createAsyncThunk(\"projects/id\", async id => {\n  return await axios.get(`projects/${id}`).then(res => {\n    return res.data;\n  });\n});\nconst portfolioSlice = createSlice({\n  name: \"portfolio\",\n  initialState: {\n    loading: false,\n    projects: [],\n    projectById: null\n  },\n  reducers: {\n    removeProject: (state, action) => {\n      state.projects = state.projects.filter(p => p._id !== action.payload._id);\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(getProjectsAsync.fulfilled, (state, action) => {\n      state.projects = action.payload;\n    });\n    builder.addCase(getProjectByidAsync.fulfilled, (state, action) => {\n      state.projectById = action.payload;\n    });\n    builder.addCase(addProjectAsync.pending, (state, action) => {\n      state.loading = true;\n    });\n    builder.addCase(addProjectAsync.fulfilled, (state, action) => {\n      state.loading = false;\n      state.projects.unshift(action.payload);\n    });\n  }\n});\nexport const {\n  removeProject\n} = portfolioSlice.actions;\nexport const removeProjectAsync = id => async dispatch => {\n  await axios.delete(`projects/${id}`).then(res => {\n    dispatch(removeProject(res.data.data));\n  });\n};\nexport default portfolioSlice.reducer;","map":{"version":3,"sources":["/Users/admin/Documents/projects/ccartists-app/src/store/reducers/artistSlice.js"],"names":["createSlice","createAsyncThunk","axios","addProjectAsync","data","post","then","res","getProjectsAsync","get","getProjectByidAsync","id","portfolioSlice","name","initialState","loading","projects","projectById","reducers","removeProject","state","action","filter","p","_id","payload","extraReducers","builder","addCase","fulfilled","pending","unshift","actions","removeProjectAsync","dispatch","delete","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nexport const addProjectAsync = createAsyncThunk(\n  \"projects/create\",\n  async (data) => {\n    return await axios.post(\"projects\", data).then((res) => {\n      return res.data;\n    });\n  }\n);\n\nexport const getProjectsAsync = createAsyncThunk(\"projects/all\", async () => {\n  return await axios.get(\"projects\").then((res) => {\n    return res.data;\n  });\n});\n\nexport const getProjectByidAsync = createAsyncThunk(\n  \"projects/id\",\n  async (id) => {\n    return await axios.get(`projects/${id}`).then((res) => {\n      return res.data;\n    });\n  }\n);\n\nconst portfolioSlice = createSlice({\n  name: \"portfolio\",\n  initialState: {\n    loading: false,\n    projects: [],\n    projectById: null,\n  },\n  reducers: {\n    removeProject: (state, action) => {\n      state.projects = state.projects.filter(\n        (p) => p._id !== action.payload._id\n      );\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(getProjectsAsync.fulfilled, (state, action) => {\n      state.projects = action.payload;\n    });\n    builder.addCase(getProjectByidAsync.fulfilled, (state, action) => {\n      state.projectById = action.payload;\n    });\n\n    builder.addCase(addProjectAsync.pending, (state, action) => {\n      state.loading = true;\n    });\n    builder.addCase(addProjectAsync.fulfilled, (state, action) => {\n      state.loading = false;\n      state.projects.unshift(action.payload);\n    });\n  },\n});\n\nexport const { removeProject } = portfolioSlice.actions;\n\nexport const removeProjectAsync = (id) => async (dispatch) => {\n  await axios.delete(`projects/${id}`).then((res) => {\n    dispatch(removeProject(res.data.data));\n  });\n};\n\nexport default portfolioSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}